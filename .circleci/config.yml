# https://circleci.com/orbs/registry/licensing for details.
# https://circleci.com/orbs/registry/orb/circleci/android
commands:
  status:
    description: |
      Send a status alert at the the end of a job based on success or failure. Must be the last step in a job.
    parameters:
      chat_id:
        default: "-461250819"
        description: |
          Enter either your id of target chat value here or use the CircleCI UI to add your chat id under the 'TELEGRAM_CHAT_ID' environment variable
        type: string
      fail_only:
        default: false
        description: |
          If `true`, notifications of successful jobs will not be sent.
        type: boolean
      failure_message:
        default: '[.](https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/large-red-circle_1f534.png)
            A $CIRCLE_JOB job has failed!'
        description: Enter custom message.
        type: string
      only_for_branches:
        default: ""
        description: |
          If set, a comma-separated list of branches for which to send notifications. No spaces.
        type: string
      success_message:
        default: '[.](https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/party-popper_1f389.png)
            A $CIRCLE_JOB job has succeeded!'
        description: Enter custom message.
        type: string
      success_only:
        default: false
        description: |
          If `true`, notifications of failed jobs will not be sent.
        type: boolean
      token:
        default: "1259984344:AAHkQg0o9orWOP79Afm2bp2XLYHs5vEJXlU"
        description: |
          Enter either your token value here or use the CircleCI UI to add your token under the 'TELEGRAM_TOKEN' environment variable
        type: string
    steps:
      - run:
          command: |
            which curl > curl_exists; echo $? | grep -q '1' && echo curl not installed && rm curl_exists && exit 1
            rm curl_exists
          name: Provide error if curl is not installed.
      - run:
          command: |
            which jq > jq_exists; echo $? | grep -q '1' && echo jq not installed && rm jq_exists && exit 1
            rm jq_exists
          name: Provide error if jq is not installed.
      - run:
          command: |
            echo 'export TELEGRAM_BUILD_STATUS="failure"' >> $BASH_ENV
          name: Telegram - Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export TELEGRAM_BUILD_STATUS="success"' >> $BASH_ENV
          name: Telegram - Setting Success Condition
          when: on_success
      - run:
          command: |
            if [ ! -x /bin/bash ]; then
              echo Bash not installed.
              exit 1
            fi
          name: Provide error if non-bash shell
      - run:
          command: |
            if [ -z "<< parameters.token >>" ]; then
              echo "No TELEGRAM_TOKEN provided".
              echo "Please input your TELEGRAM_TOKEN value either in the settings for this project, or as a parameter for this orb."
              exit 1
            fi
          name: Provide error if token not provided
      - run:
          command: |
            if [ -z "<< parameters.chat_id >>" ]; then
              echo "No TELEGRAM_CHAT_ID provided".
              echo "Please input your TELEGRAM_CHAT_ID value either in the settings for this project, or as a parameter for this orb."
              exit 1
            fi
          name: Provide error if chat id not provided
      - run:
          command: |
            send_msg () {
                curl -s -X POST https://api.telegram.org/bot<< parameters.token >>/sendMessage \
                    -d chat_id=<< parameters.chat_id >> \
                    -d text="$1" -d parse_mode=Markdown
            }

            # check if we should send a message for current branch
            current_branch_in_filter=false

            IFS="," read -ra BRANCH_FILTERS \<<< "<< parameters.only_for_branches >>"

            for i in "${BRANCH_FILTERS[@]}"; do
              if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
                current_branch_in_filter=true
              fi
            done

            if [ "x" == "x<< parameters.only_for_branches>>" ] || [ "$current_branch_in_filter" = true ]; then
              #If successful
              if [ "$TELEGRAM_BUILD_STATUS" == "success" ]; then
                # Skip if fail_only is set
                if [ << parameters.fail_only >> = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Telegram notification sent.'
                else
                  send_msg "
                  << parameters.success_message >>
                  "
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If failed
                #Skip if success_only
                if [ << parameters.success_only >> = true ]; then
                  echo "The job failed"
                  echo '"success_only" is set to "true". No Telegram notification sent.'
                else
                  send_msg "<< parameters.failure_message >>"
                  echo "Job failed. Alert send"
                fi
              fi
            else
              echo "Current branch is not included in only_for_branches filter, so no status alert will be sent."
            fi
          name: Telegram - Sending Status Alert
          shell: /bin/bash
          when: always
  accept-licenses:
    description: |
      Accept all Android SDK Manager licenses
    steps:
      - run:
          command: |
            yes | sdkmanager --licenses
            yes | sdkmanager --update
          description: |
            Accepts all Android SDK licenses. This command is typically not necessary to execute, since the CircleCI convenience images ship with all licenses accepted. This command will add approximately 10 seconds to the build time.
          name: Accept Android Licenses
          shell: /bin/bash -e
  install-ndk:
    description: |
      Extend CircleCI's Android convenience images by installing a version of the Android NDK of your choice.
    parameters:
      ndk-sha:
        default: fd94d0be6017c6acbd193eb95e09cf4b6f61b834
        description: |
          SHA-1 of the zip file specified by ndk-version. Provide a string formatted along the lines of the default value. See https://developer.android.com/ndk/downloads
        type: string
      ndk-version:
        default: android-ndk-r21b
        description: |
          Version of the NDK to install. Provide a string formatted along the lines of the default value.
        type: string
    steps:
      - run:
          command: |
            [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

            $SUDO curl --silent --show-error --location --fail --retry 3 \
              --output /tmp/<<parameters.ndk-version>>.zip \
              https://dl.google.com/android/repository/<<parameters.ndk-version>>-linux-x86_64.zip

            $SUDO echo "<<parameters.ndk-sha>> /tmp/<<parameters.ndk-version>>.zip" > /tmp/<<parameters.ndk-version>>.zip.sha1

            sha1sum -c /tmp/<<parameters.ndk-version>>.zip.sha1

            $SUDO unzip -q /tmp/<<parameters.ndk-version>>.zip -d /opt/android
            $SUDO rm -f /tmp/<<parameters.ndk-version>>*

            $SUDO chown -R circleci:circleci /opt/android/<<parameters.ndk-version>>

            echo "export ANDROID_NDK_HOME=/opt/android/<<parameters.ndk-version>>" >> $BASH_ENV

            if [[ -d /opt/android/<<parameters.ndk-version>> && \
              -n "$(ls -A /opt/android/<<parameters.ndk-version>>)" ]]; then
              echo "Android NDK installed"
            else
              echo "Android NDK did not install successfully"
              exit 1
            fi
          name: Install Android NDK
  restore-build-cache:
    description: |
      Restore the build cache. See `save_build_cache` for more information.
    steps:
      - restore_cache:
          key: android-orb-v1-
  save-build-cache:
    description: |
      Save the Android build-cache. The build cache stores certain outputs that the Android plugin for Gradle generates when building your project (such as unpackaged AARs and pre-dexed remote dependencies). Your clean builds are much faster while using the cache because the build system can simply reuse those cached files during subsequent builds, instead of recreating them. The build cache also works on continuous integration servers and when running multiple build processes on a single local machine.
      See https://developer.android.com/studio/build/build-cache
    steps:
      - save_cache:
          key: android-orb-v1-{{ epoch }}
          paths:
            - ~/.android/build-cache
            - ~/.android/cache
description: |
  Orb for working with Android projects on CircleCI. Source: https://github.com/circleci-public/android-orb
executors:
  android:
    description: |
      Select a CircleCI convenience image to get building on Android.
      See https://hub.docker.com/r/circleci/android/tags for a full list of
      the available images.
    docker:
      - image: circleci/android:api-<<parameters.sdk-version>><<#parameters.variant>>-<<parameters.variant>><</parameters.variant>>
    parameters:
      sdk-version:
        default: "29"
        description: |
          The API level to use. For Android Oreo 8.1.0, use API level "27", for example. See https://source.android.com/setup/start/build-numbers for a full list.
        enum:
          - "23"
          - "24"
          - "25"
          - "26"
          - "27"
          - "28"
          - "29"
        type: enum
      variant:
        default: ""
        description: |
          Choose an optional Android image variant, either node or ndk: https://hub.docker.com/r/circleci/android/tags
        enum:
          - ""
          - node
          - ndk
        type: enum
jobs:
  build:
    description: |
      Start building an Android project on CircleCI
    executor:
      name: android
      sdk-version: "29"
    steps:
      - checkout
      - accept-licenses
      - run: exit 0
      - status
orbs:
  android: circleci/android@0.2.1
version: 2.1